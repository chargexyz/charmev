#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    non_snake_case
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

use crate::api::*;
use flutter_rust_bridge::*;

// Section: wire functions

#[no_mangle]
pub extern "C" fn wire_init_logger(port_: i64) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "init_logger",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| init_logger(),
    )
}

#[no_mangle]
pub extern "C" fn wire_connect_p2p(port_: i64, url: *mut wire_uint_8_list) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "connect_p2p",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_url = url.wire2api();
            move |task_callback| connect_p2p(api_url)
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_disconnect_p2p(port_: i64, peer_id: *mut wire_uint_8_list) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "disconnect_p2p",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_peer_id = peer_id.wire2api();
            move |task_callback| disconnect_p2p(api_peer_id)
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_send_identity_challenge_event(port_: i64) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "send_identity_challenge_event",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| send_identity_challenge_event(),
    )
}

#[no_mangle]
pub extern "C" fn wire_send_stop_charge_event(port_: i64) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "send_stop_charge_event",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| send_stop_charge_event(),
    )
}

#[no_mangle]
pub extern "C" fn wire_send_service_requested_event(
    port_: i64,
    provider: *mut wire_uint_8_list,
    consumer: *mut wire_uint_8_list,
    token_deposited: *mut wire_uint_8_list,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "send_service_requested_event",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_provider = provider.wire2api();
            let api_consumer = consumer.wire2api();
            let api_token_deposited = token_deposited.wire2api();
            move |task_callback| {
                send_service_requested_event(api_provider, api_consumer, api_token_deposited)
            }
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_get_account_balance(
    port_: i64,
    ws_url: *mut wire_uint_8_list,
    token_decimals: *mut wire_uint_8_list,
    seed: *mut wire_uint_8_list,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_account_balance",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_ws_url = ws_url.wire2api();
            let api_token_decimals = token_decimals.wire2api();
            let api_seed = seed.wire2api();
            move |task_callback| get_account_balance(api_ws_url, api_token_decimals, api_seed)
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_generate_account(
    port_: i64,
    ws_url: *mut wire_uint_8_list,
    secret_phrase: *mut wire_uint_8_list,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "generate_account",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_ws_url = ws_url.wire2api();
            let api_secret_phrase = secret_phrase.wire2api();
            move |task_callback| generate_account(api_ws_url, api_secret_phrase)
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_create_multisig_address(
    port_: i64,
    signatories: *mut wire_StringList,
    threshold: u16,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "create_multisig_address",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_signatories = signatories.wire2api();
            let api_threshold = threshold.wire2api();
            move |task_callback| create_multisig_address(api_signatories, api_threshold)
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_approve_multisig(
    port_: i64,
    ws_url: *mut wire_uint_8_list,
    threshold: u16,
    other_signatories: *mut wire_StringList,
    timepoint_height: u32,
    timepoint_index: u32,
    call_hash: *mut wire_uint_8_list,
    seed: *mut wire_uint_8_list,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "approve_multisig",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_ws_url = ws_url.wire2api();
            let api_threshold = threshold.wire2api();
            let api_other_signatories = other_signatories.wire2api();
            let api_timepoint_height = timepoint_height.wire2api();
            let api_timepoint_index = timepoint_index.wire2api();
            let api_call_hash = call_hash.wire2api();
            let api_seed = seed.wire2api();
            move |task_callback| {
                approve_multisig(
                    api_ws_url,
                    api_threshold,
                    api_other_signatories,
                    api_timepoint_height,
                    api_timepoint_index,
                    api_call_hash,
                    api_seed,
                )
            }
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_transfer_fund(
    port_: i64,
    ws_url: *mut wire_uint_8_list,
    address: *mut wire_uint_8_list,
    amount: *mut wire_uint_8_list,
    seed: *mut wire_uint_8_list,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "transfer_fund",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_ws_url = ws_url.wire2api();
            let api_address = address.wire2api();
            let api_amount = amount.wire2api();
            let api_seed = seed.wire2api();
            move |task_callback| transfer_fund(api_ws_url, api_address, api_amount, api_seed)
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_get_event(port_: i64) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_event",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| get_event(),
    )
}

#[no_mangle]
pub extern "C" fn wire_verify_peer_did_document(
    port_: i64,
    provider_pk: *mut wire_uint_8_list,
    signature: *mut wire_uint_8_list,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "verify_peer_did_document",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_provider_pk = provider_pk.wire2api();
            let api_signature = signature.wire2api();
            move |task_callback| verify_peer_did_document(api_provider_pk, api_signature)
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_verify_peer_identity(
    port_: i64,
    provider_pk: *mut wire_uint_8_list,
    plain_data: *mut wire_uint_8_list,
    signature: *mut wire_uint_8_list,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "verify_peer_identity",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_provider_pk = provider_pk.wire2api();
            let api_plain_data = plain_data.wire2api();
            let api_signature = signature.wire2api();
            move |task_callback| {
                verify_peer_identity(api_provider_pk, api_plain_data, api_signature)
            }
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_fetch_did_document(
    port_: i64,
    ws_url: *mut wire_uint_8_list,
    public_key: *mut wire_uint_8_list,
    storage_name: *mut wire_uint_8_list,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "fetch_did_document",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_ws_url = ws_url.wire2api();
            let api_public_key = public_key.wire2api();
            let api_storage_name = storage_name.wire2api();
            move |task_callback| fetch_did_document(api_ws_url, api_public_key, api_storage_name)
        },
    )
}

// Section: wire structs

#[repr(C)]
#[derive(Clone)]
pub struct wire_StringList {
    ptr: *mut *mut wire_uint_8_list,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_uint_8_list {
    ptr: *mut u8,
    len: i32,
}

// Section: wire enums

// Section: allocate functions

#[no_mangle]
pub extern "C" fn new_StringList(len: i32) -> *mut wire_StringList {
    let wrap = wire_StringList {
        ptr: support::new_leak_vec_ptr(<*mut wire_uint_8_list>::new_with_null_ptr(), len),
        len,
    };
    support::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn new_uint_8_list(len: i32) -> *mut wire_uint_8_list {
    let ans = wire_uint_8_list {
        ptr: support::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    support::new_leak_box_ptr(ans)
}

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<String> for *mut wire_uint_8_list {
    fn wire2api(self) -> String {
        let vec: Vec<u8> = self.wire2api();
        String::from_utf8_lossy(&vec).into_owned()
    }
}

impl Wire2Api<Vec<String>> for *mut wire_StringList {
    fn wire2api(self) -> Vec<String> {
        let vec = unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(Wire2Api::wire2api).collect()
    }
}

impl Wire2Api<u16> for u16 {
    fn wire2api(self) -> u16 {
        self
    }
}

impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {
    fn wire2api(self) -> Vec<u8> {
        unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}

// Section: impl NewWithNullPtr

pub trait NewWithNullPtr {
    fn new_with_null_ptr() -> Self;
}

impl<T> NewWithNullPtr for *mut T {
    fn new_with_null_ptr() -> Self {
        std::ptr::null_mut()
    }
}

// Section: impl IntoDart

// Section: executor
support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

// Section: sync execution mode utility

#[no_mangle]
pub extern "C" fn free_WireSyncReturnStruct(val: support::WireSyncReturnStruct) {
    unsafe {
        let _ = support::vec_from_leak_ptr(val.ptr, val.len);
    }
}
